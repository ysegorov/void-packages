--- a/avidemux_plugins/ADM_videoEncoder/x265/ADM_x265.cpp       2022-09-17 10:59:17.000000000 -0300
+++ b/avidemux_plugins/ADM_videoEncoder/x265/ADM_x265.cpp       2025-01-26 19:27:19.796218401 -0300
@@ -205,15 +205,20 @@
     //
       x265_nal          *nal;
       uint32_t          nbNal = 0;
-      x265_picture      pic_out;
-      api->picture_init(&param,&pic_out);
+      x265_picture      pic_out[MAX_SCALABLE_LAYERS];
+      x265_picture      *pic_out_ptr[MAX_SCALABLE_LAYERS];
       out->flags = 0;
       
+      for (int i = 0; i < MAX_SCALABLE_LAYERS; i++)
+      {
+             api->picture_init(&param,&pic_out[i]);
+             pic_out_ptr[i] = &pic_out[i];
+      }
         int er;
         if(false==gotFrame)     
         {
             ADM_info("Flushing delayed frames\n");
-            er = api->encoder_encode(handle, &nal, &nbNal, NULL, &pic_out);
+            er = api->encoder_encode(handle, &nal, &nbNal, NULL, pic_out_ptr);
             if(er<=0)
             {
                 ADM_info ("End of flush\n");
@@ -221,7 +226,7 @@
             }
         }else 
         {
-            er = api->encoder_encode(handle, &nal, &nbNal, &pic, &pic_out);
+            er = api->encoder_encode(handle, &nal, &nbNal, &pic, pic_out_ptr);
             if(er<0)
             {
               ADM_error ("[x265] Error encoding %d\n",er);
@@ -236,7 +241,7 @@
 
 
     // 3-encode
-    if(false==postAmble(out,nbNal,nal,&pic_out))
+    if(false==postAmble(out,nbNal,nal,pic_out_ptr[0]))
     {
         ADM_warning("[x265] postAmble failed\n");
         return false;
