# Template file for 'ungoogled-chromium'
# Based on chromium, with ungoogled-chromium patches
pkgname=ungoogled-chromium
# See https://github.com/ungoogled-software/ungoogled-chromium for the latest version
version=108.0.5359.98
revision=1
archs="x86_64"
short_desc="A lightweight approach to removing Google web service dependency"
maintainer="Yuri Egorov <ysegorov@gmail.com>"
license="BSD"
homepage="https://github.com/ungoogled-software/ungoogled-chromium"

conflicts="chromium"

# ungoogled chromium variables
_uc_usr=ungoogled-software
_uc_rev=1
_uc_ver="${version}-${_uc_rev}"
_uc_name="${pkgname}-${_uc_ver}"
_launcher_ver=8
_gcc_patchset=2

distfiles="https://commondatastorage.googleapis.com/chromium-browser-official/chromium-${version}.tar.xz
 https://github.com/${_uc_usr}/ungoogled-chromium/archive/${_uc_ver}.tar.gz>${_uc_name}.tar.gz
 https://github.com/foutrelis/chromium-launcher/archive/v${_launcher_ver}/chromium-launcher-${_launcher_ver}.tar.gz
 https://github.com/stha09/chromium-patches/releases/download/chromium-${version%%.*}-patchset-${_gcc_patchset}/chromium-${version%%.*}-patchset-${_gcc_patchset}.tar.xz"

checksum="60b6137971e3cb2947477f654491ed4f517ab88ea2807fa3b89fcce34b83561e
 91afcb2ab483b226979b4114ba5ce2aa462658688c10cafd29f78c4be607357e
 213e50f48b67feb4441078d50b0fd431df34323be15be97c55302d3fdac4483a
 40ef8af65e78901bb8554eddbbb5ebc55c0b8e7927f6ca51b2a353d1c7c50652"

lib32disabled=yes

create_wrksrc=yes
build_wrksrc="chromium-${version}"

build_options="clang debug js_optimize vaapi pulseaudio sndio pipewire"
build_options_default="clang js_optimize vaapi pulseaudio pipewire"
desc_option_clang="Use clang to build"
desc_option_debug="Build with debug symbols"
desc_option_js_optimize="Optimize the JS used for Chromium's UI"
desc_option_pipewire="Enable support for screen sharing for WebRTC via PipeWire"

hostmakedepends="$(vopt_if clang "clang lld llvm12") python3 pkgconf perl gperf bison ninja nodejs hwids
 libatomic-devel libevent-devel libglib-devel $(vopt_if js_optimize openjdk) wayland-devel libepoxy-devel git"
makedepends="libpng-devel gtk+3-devel nss-devel pciutils-devel
 libXi-devel libgcrypt-devel cups-devel elfutils-devel
 libXcomposite-devel speech-dispatcher-devel libXrandr-devel mit-krb5-devel
 libXScrnSaver-devel alsa-lib-devel snappy-devel libdrm-devel
 libxml2-devel libxslt-devel $(vopt_if pulseaudio pulseaudio-devel) libexif-devel
 libXcursor-devel libflac-devel speex-devel libmtp-devel libwebp-devel
 libjpeg-turbo-devel libevent-devel json-c-devel
 minizip-devel jsoncpp-devel zlib-devel libcap-devel libXdamage-devel
 re2-devel fontconfig-devel freetype-devel opus-devel libatomic-devel
 brotli-devel ffmpeg-devel jsoncpp-devel libva-devel xcb-proto libcurl-devel
 libxshmfence-devel woff2-devel 
 $(vopt_if pipewire pipewire-devel) $(vopt_if sndio sndio-devel)"
depends="libexif hwids desktop-file-utils hicolor-icon-theme xdg-utils"

if [ "$CROSS_BUILD" ]; then
	hostmakedepends+=" libX11-devel libxcb-devel pciutils-devel libXext-devel libglvnd-devel
	 libjpeg-turbo-devel libXi-devel nss-devel libpng-devel libwebp-devel
	 libxml2-devel $(vopt_if pulseaudio pulseaudio-devel) libxslt-devel libxkbcommon-devel
	 $(vopt_if pipewire pipewire-devel) brotli-devel ffmpeg-devel jsoncpp-devel opus-devel pango-devel libva-devel
	 libcurl-devel snappy-devel re2-devel libXrandr-devel libXcomposite-devel cups-devel woff2-devel 
	 mit-krb5-devel alsa-lib-devel libXdamage-devel libepoxy-devel"
fi

if [ ! "$XBPS_WORDSIZE" = "$XBPS_TARGET_WORDSIZE" ]; then
	broken="chromium (v8) can only be cross compiled if word size matches"
fi

if [ "$CROSS_BUILD" ]; then
	case "${XBPS_TARGET_MACHINE}" in
		aarch64*) ;;
		*) nocross="chromium can not be cross compiled for this architecture" ;;
	esac
fi

do_patch() {
        local 
	# Use the file at run time instead of effectively compiling it in
	sed 's|//third_party/usb_ids/usb.ids|/usr/share/hwdata/usb.ids|g' \
		-i services/device/public/cpp/usb/BUILD.gn

	if [ -z "$build_option_clang" ]; then
		# Work around bug in blink in which GCC 6 optimizes away null pointer checks
		# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=833524
		# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=68853#c2
		sed -i '/config("compiler")/ a cflags_cc = [ "-fno-delete-null-pointer-checks" ]' \
			build/config/linux/BUILD.gn
	fi

	# prevent annoying errors when regenerating gni
	vsed -i 's,^update_readme$,#update_readme,' \
		third_party/libvpx/generate_gni.sh

	# allow system dependencies in "official builds"
	vsed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
		tools/generate_shim_headers/generate_shim_headers.py

	# # https://crbug.com/893950
	vsed -i -e 's/\<xmlMalloc\>/malloc/' -e 's/\<xmlFree\>/free/' \
	  third_party/blink/renderer/core/xml/*.cc \
	  third_party/blink/renderer/core/xml/parser/xml_document_parser.cc \
	  third_party/libxml/chromium/*.cc \
	  third_party/maldoca/src/maldoca/ole/oss_utils.h
	
        # patches from ../chromium/patches/
        patch -Np1 -i $PATCHESDIR/libc_malloc.patch
        patch -Np1 -i $PATCHESDIR/unbundle-ffmpeg-av_stream_get_first_dts.patch
        patch -Np1 -i $PATCHESDIR/chromium-93-ffmpeg-4.4.patch
        patch -Np1 -i $PATCHESDIR/fix-argument_spec-isnan-isinf.patch

	# Use the --oauth2-client-id= and --oauth2-client-secret= switches for
	# setting GOOGLE_DEFAULT_CLIENT_ID and GOOGLE_DEFAULT_CLIENT_SECRET at
	# runtime -- this allows signing into Chromium without baked-in values
	patch -Np1 -i $PATCHESDIR/use-oauth2-client-switches-as-default.patch

	# Upstream fixes
        patch -Np1 -i $PATCHESDIR/re-fix-TFLite-build-error-on-linux-with-system-zlib.patch

        patch -Np1 -i $PATCHESDIR/chromium-icu72.patch
        patch -Np1 -d v8 <$PATCHESDIR/v8-enhance-Date-parser-to-take-Unicode-SPACE.patch

	# Revert ffmpeg roll requiring new channel layout API support
	# https://crbug.com/1325301
        patch -Rp1 -i $PATCHESDIR/REVERT-roll-src-third_party-ffmpeg-m102.patch
        # Revert switch from AVFrame::pkt_duration to AVFrame::duration
        patch -Rp1 -i $PATCHESDIR/REVERT-roll-src-third_party-ffmpeg-m106.patch

        # Disable kGlobalMediaControlsCastStartStop by default
        # https://crbug.com/1314342
        patch -Np1 -i $PATCHESDIR/disable-GlobalMediaControlsCastStartStop.patch

	# https://crbug.com/angleproject/7582
	patch -Np0 -i $PATCHESDIR/angle-wayland-include-protocol.patch

	# Fixes for building with libstdc++ instead of libc++
	patch -Np1 -i ../patches/chromium-103-VirtualCursor-std-layout.patch
	patch -Np1 -i ../patches/chromium-108-compiler.patch

	# Link to system tools required by the build
	mkdir -p third_party/node/linux/node-linux-x64/bin
	ln -s /usr/bin/node third_party/node/linux/node-linux-x64/bin/
	ln -s /usr/bin/java third_party/jdk/current/bin/

	# Wayland/EGL regression (crbug #1071528 #1071550)
	patch -Np1 -i $PATCHESDIR/wayland-egl.patch

	# VAAPI wayland support (https://github.com/ungoogled-software/ungoogled-chromium-archlinux/issues/161)
	patch -Np1 -i $PATCHESDIR/ozone-add-va-api-support-to-wayland.patch

	# Ungoogled Chromium changes
	_ungoogled_repo="../${_uc_name}"
	_uc_utils="${_ungoogled_repo}/utils"
	msg_normal "Pruning binaries...\n"
	python "${_uc_utils}/prune_binaries.py" ./ "${_ungoogled_repo}/pruning.list"
	msg_normal "Applying patches...\n"
	python "${_uc_utils}/patches.py" apply ./ "${_ungoogled_repo}/patches"
	msg_normal "Applying domain substitution...\n"
	python "${_uc_utils}/domain_substitution.py" apply -r "${_ungoogled_repo}/domain_regex.list" \
	  -f "${_ungoogled_repo}/domain_substitution.list" -c domainsubcache.tar.gz ./

}

_setup_clang() {
	local gcc_version=$(gcc -dumpversion)
	local clang_version=$(clang -dumpversion)
	export CC=clang
	export CXX=clang++
	export AR=ar
	export NM=nm
	export CFLAGS="-march=x86-64 -mtune=generic -O2 -pipe -fno-plt -Wno-builtin-macro-redefined -Wno-unknown-warning-option"
	export CXXFLAGS="-march=x86-64 -mtune=generic -O2 -pipe -fno-plt -Wno-builtin-macro-redefined -Wno-unknown-warning-option"
        export CPPFLAGS=" -D__DATE__=  -D__TIME__=  -D__TIMESTAMP__="
	export LDFLAGS=""
	export BUILD_CC=clang
	export BUILD_CXX=clang++
	export BUILD_AR=llvm-ar
	export BUILD_NM=llvm-nm
	export BUILD_CFLAGS="-march=x86-64 -mtune=generic -O2 -pipe -fno-plt -Wno-builtin-macro-redefined -Wno-unknown-warning-option"
	export BUILD_CXXFLAGS="-march=x86-64 -mtune=generic -O2 -pipe -fno-plt -Wno-builtin-macro-redefined -Wno-unknown-warning-option"
	if [ "$CROSS_BUILD" ]; then
		CFLAGS+=" --gcc-toolchain=/usr"
		CFLAGS+=" --sysroot=${XBPS_CROSS_BASE}"
		CFLAGS+=" -nostdinc"
		CFLAGS+=" -isystem ${XBPS_CROSS_BASE}/usr/include"
		CFLAGS+=" -isystem /usr/lib/clang/${clang_version}/include"
		CXXFLAGS+=" --gcc-toolchain=/usr"
		CXXFLAGS+=" --sysroot=${XBPS_CROSS_BASE}"
		CXXFLAGS+=" -nostdinc++"
		CXXFLAGS+=" -isystem ${XBPS_CROSS_BASE}/usr/include/c++/${gcc_version%.*}"
		CXXFLAGS+=" -isystem ${XBPS_CROSS_BASE}/usr/include/c++/${gcc_version%.*}/${XBPS_CROSS_TRIPLET}"
		CXXFLAGS+=" -isystem ${XBPS_CROSS_BASE}/usr/include/c++/${gcc_version%.*}/backward"
		CXXFLAGS+=" -nostdinc"
		CXXFLAGS+=" -isystem ${XBPS_CROSS_BASE}/usr/include"
		CXXFLAGS+=" -isystem /usr/lib/clang/${clang_version}/include"
		LDFLAGS+=" --gcc-toolchain=/usr --sysroot=${XBPS_CROSS_BASE}"
	fi
}

_setup_toolchain() {
	if [ "$build_option_clang" ]; then
		_setup_clang
	fi
	# CXXFLAGS+=" -fdebug-prefix-map=$wrksrc=."
	# CFLAGS+=" -fdebug-prefix-map=$wrksrc=."
}

do_configure() {
	local system="" conf=()

	# compile gn early, so it can be used to generate gni stuff
	AR="ar" CC=$CC_FOR_BUILD CXX=$CXX_FOR_BUILD LD=$CXX_FOR_BUILD \
		CFLAGS=$CFLAGS_FOR_BUILD CXXFLAGS=$CXXFLAGS_FOR_BUILD LDFLAGS=$LDFLAGS_FOR_BUILD \
		tools/gn/bootstrap/bootstrap.py --skip-generate-buildfiles

	# Use system-provided libraries.
	# TODO: use_system_hunspell (upstream changes needed).
	# TODO: use_system_libsrtp.
	# TODO: use_system_libusb (http://crbug.com/266149).
	# TODO: use_system_ssl (http://crbug.com/58087).
	# TODO: use_system_sqlite (http://crbug.com/22208).
	# TODO: use_system_icu (segfaults)
	# XXX xtraeme: broken currently
	# use_system_protobuf
	# use_system_v8=1
	# use_system_zlib=1
	# bzip2 jsoncpp minizip xdg_utils speex
	# XXX: harfbuzz-ng use builtin one until system-wide is updated >=3.0.0
	system="
                brotli
		ffmpeg
		flac
		fontconfig
		freetype
                jsoncpp
		libdrm
		libevent
		libjpeg
		libpng
		libwebp
		libxml
		libxslt
		opus
		re2
		snappy
                woff2
	"

	# remove build scripts for system provided dependencies - basically does the
	# same as the bundeled script to remove bundeled libs, but this way we don't
	# have to list the remaining libs
	for LIB in ${system} libjpeg_turbo; do
		find -type f -path "*third_party/$LIB/*" \
			\! -path "*third_party/$LIB/chromium/*" \
			\! -path "*third_party/$LIB/google/*" \
			\! -path './base/third_party/icu/*' \
			\! -path './third_party/pdfium/third_party/freetype/include/pstables.h' \
			\! -path './third_party/harfbuzz-ng/utils/hb_scoped.h' \
			\! -regex '.*\.\(gn\|gni\|isolate\|py\)' \
			-delete
	done

	# switch to system provided dependencies
	build/linux/unbundle/replace_gn_files.py --system-libraries ${system}

	third_party/libaddressinput/chromium/tools/update-strings.py

	conf=(
		'enable_nacl=false'

		'use_sysroot=false'

		'host_pkg_config="/usr/bin/pkg-config"'

		"is_clang=$(vopt_if clang true false)"
		"use_lld=$(vopt_if clang true false)"
		'clang_use_chrome_plugins=false'
		'clang_base_path="/usr"'

		"gold_path=\"${XBPS_CROSS_BASE}/usr/bin/ld.gold\""
		'use_custom_libcxx=false'
		'use_gold=false'

		# is_debug makes the build a debug build, changes some things.
		# might be useful for real debugging vs just debug symbols.
		"is_debug=false"
		"blink_symbol_level=$(vopt_if debug 1 0)"
		"symbol_level=$(vopt_if debug 1 0)"

		'icu_use_data_file=true'

		'use_allocator="none"'
		'use_allocator_shim=false'

		'enable_widevine=true'
		'enable_hangout_services_extension=false'

		'use_system_harfbuzz=false'
		'use_system_libwayland=true'
		'use_system_wayland_scanner=true'

		'use_qt=false'

		'use_cups=true'

		"use_vaapi=$(vopt_if vaapi true false)"

		# deprecated
		'use_gnome_keyring=false'

		# https://chromium.googlesource.com/chromium/src/+/master/docs/closure_compilation.md
		"enable_js_type_check=$(vopt_if js_optimize true false)"

		"use_pulseaudio=$(vopt_if pulseaudio true false)"
		"link_pulseaudio=$(vopt_if pulseaudio true false)"

		"rtc_use_pipewire=$(vopt_if pipewire true false)"

		"use_sndio=$(vopt_if sndio true false)"

		# Always support proprietary codecs.
		# Enable H.264 support in bundled ffmpeg.
		'proprietary_codecs=true'
		'ffmpeg_branding="Chrome"'

		# Make sure that -Werror doesn't get added to CFLAGS by the build system.
		# Depending on GCC version the warnings are different and we don't want
		# the build to fail because of that.
		'treat_warnings_as_errors=false'
		'fatal_linker_warnings=false'

		# Save space by removing DLOG and DCHECK messages (about 6% reduction).
		# 'logging_like_official_build=true'
		'disable_fieldtrial_testing_config=true'

		'is_official_build=true'

		# segfaults with llvm-12.0.1
		'is_cfi=false'
		'use_thin_lto=false'
		'use_cfi_icall=false'
		'chrome_pgo_phase=0'

                # from ungoogled-chromium-archlinux PKGBUILD
                'blink_enable_generated_code_formatting=false'
                'enable_platform_hevc=true'
                'enable_hevc_parser_and_hw_decoder=true'
	)

	# Append ungoogled chromium flags to _flags array
	_ungoogled_repo="../${_uc_name}"
	readarray -t -O ${#conf[@]} conf < "${_ungoogled_repo}/flags.gn"

	if [ "$CROSS_BUILD" ]; then
		conf+=(
			'custom_toolchain="//build/toolchain/linux/unbundle:default"'
			'host_toolchain="//build/toolchain/linux/unbundle:host"'
			'v8_snapshot_toolchain="//build/toolchain/linux/unbundle:v8_snapshot_cross"'
		)
	else
		conf+=(
			'custom_toolchain="//build/toolchain/linux/unbundle:default"'
			'host_toolchain="//build/toolchain/linux/unbundle:default"'
		)
	fi

	# this does not work on ppc64 yet
	case "$XBPS_TARGET_MACHINE" in
		ppc64*) conf+=( "enable_jxl_decoder=false" );;
	esac

	if [ "$XBPS_TARGET_LIBC" = "musl" ]; then
		conf+=( 'is_musl=true' )
	fi

	case "${XBPS_TARGET_MACHINE}" in
		x86_64*) conf+=( 'target_cpu="x64"' ) ;;
		i686*) conf+=( 'target_cpu="x86"' ) ;;
		arm*) conf+=( 'target_cpu="arm"' ) ;;
		aarch64*) conf+=( 'target_cpu="arm64"' ) ;;
		ppc64*) conf+=( 'target_cpu="ppc64"' ) ;;
	esac

	if [ "$CROSS_BUILD" ]; then
		case "${XBPS_MACHINE}" in
			x86_64*) conf+=( 'host_cpu="x64"' ) ;;
			i686*) conf+=( 'host_cpu="x86"' ) ;;
			arm*) conf+=( 'host_cpu="arm"' ) ;;
			aarch64*) conf+=( 'host_cpu="arm64"' ) ;;
			ppc64*) conf+=( 'host_cpu="ppc64"' ) ;;
		esac
	fi
	_setup_toolchain
	out/Release/gn gen out/Release --args="${conf[*]}"
}

do_build() {
	_setup_toolchain
	CCACHE_SLOPPINESS=include_file_mtime ninja -C out/Release ${makejobs} chrome chromedriver chrome_crashpad_handler
}

do_install() {
	vmkdir usr/lib/chromium

	vinstall out/Release/chrome 755 usr/lib/chromium chromium
	vinstall out/Release/chrome_crashpad_handler 755 usr/lib/chromium chrome_crashpad_handler
	vinstall out/Release/chromedriver 755 usr/lib/chromium chromedriver
	vinstall out/Release/libEGL.so 755 usr/lib/chromium libEGL.so
	vinstall out/Release/libGLESv2.so 755 usr/lib/chromium libGLESv2.so
	vinstall out/Release/libvk_swiftshader.so 755 usr/lib/chromium libvk_swiftshader.so
	vinstall out/Release/vk_swiftshader_icd.json 755 usr/lib/chromium vk_swiftshader_icd.json

	vcopy "out/Release/*.bin" usr/lib/chromium
	vcopy "out/Release/*.pak" usr/lib/chromium

	vmkdir usr/lib/chromium/locales
	vcopy "out/Release/locales/*.pak" usr/lib/chromium/locales

	vinstall ${FILESDIR}/chromium.desktop 644 usr/share/applications

	vinstall out/Release/icudtl.dat 0644 usr/lib/chromium

	for size in 24 48 64 128 256; do
		vinstall "chrome/app/theme/chromium/product_logo_${size}.png" \
			644 \
			usr/share/icons/hicolor/${size}x${size}/apps chromium.png
	done
	for size in 16 32; do
		vinstall "chrome/app/theme/default_100_percent/chromium/product_logo_${size}.png" \
			644 \
			usr/share/icons/hicolor/${size}x${size}/apps chromium.png
	done

	vbin ${FILESDIR}/chromium.sh chromium
	vlicense LICENSE
	ln -sf /usr/lib/chromium/chromedriver ${DESTDIR}/usr/bin/chromedriver
}
