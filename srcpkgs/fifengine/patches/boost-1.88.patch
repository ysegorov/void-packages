--- a/engine/core/loaders/native/map/atlasloader.cpp
+++ b/engine/core/loaders/native/map/atlasloader.cpp
@@ -312,7 +312,7 @@ namespace FIFE {
 				atlasElem->QueryValueAttribute("subimage_width", &subimageWidth);
 				atlasElem->QueryValueAttribute("subimage_height", &subimageHeight);
 				// file extension of the atlas is also used as subimage extension
-				std::string extension = bfs::extension(*atlasSource);
+				std::string extension = bfs::path(*atlasSource).extension().string();
 				// we need an atlas id
 				if (!atlasId) {
 					atlasId = atlasSource;
--- a/engine/core/loaders/native/map/maploader.cpp
+++ b/engine/core/loaders/native/map/maploader.cpp
@@ -838,7 +838,7 @@ namespace FIFE {
 			for (iter = files.begin(); iter != files.end(); ++iter) {
 				// TODO - vtchill - may need a way to allow clients to load things other
 				// than .xml and .zip files
-				std::string ext = bfs::extension(*iter);
+				std::string ext = bfs::path(*iter).extension().string();
 				if (ext == ".xml" || ext == ".zip") {
 					loadImportFile(*iter, importDirectoryString);
 				}
--- a/engine/core/loaders/native/map/objectloader.cpp
+++ b/engine/core/loaders/native/map/objectloader.cpp
@@ -702,7 +702,7 @@ namespace FIFE {
 			for (iter = files.begin(); iter != files.end(); ++iter) {
 				// TODO - vtchill - may need a way to allow clients to load things other
 				// than .xml and .zip files
-				std::string ext = bfs::extension(*iter);
+				std::string ext = bfs::path(*iter).extension().string();
 				if (ext == ".xml" || ext == ".zip") {
 					loadImportFile(*iter, importDirectoryString);
 				}
--- a/engine/core/gui/fifechan/fifechanmanager.cpp
+++ b/engine/core/gui/fifechan/fifechanmanager.cpp
@@ -249,7 +249,8 @@ namespace FIFE {
 
 		IFont* font = NULL;
 		GuiFont* guifont = NULL;
-		if( bfs::extension(fontpath) == ".ttf" || bfs::extension(fontpath) == ".ttc" ) {
+		std::string fontext = bfs::path(fontpath).extension().string();
+		if (fontext == ".ttf" || fontext == ".ttc") {
 			font = new TrueTypeFont(fontpath, fontsize);
 		} else {
 			font = new SubImageFont(fontpath, fontglyphs);
