--- a/src/usages_clang.cpp
+++ b/src/usages_clang.cpp
@@ -562,7 +562,7 @@ Usages::Clang::PathSet Usages::Clang::fi
     boost::system::error_code ec;
     if(!boost::filesystem::is_regular_file(path, ec)) {
       if(path == build_path || path == debug_path || path.filename() == ".git")
-        it.no_push();
+        it.disable_recursion_pending();
       continue;
     }
 
@@ -737,7 +737,7 @@ void Usages::Clang::write_cache(const bo
       stream.close();
       boost::filesystem::rename(tmp_file, full_cache_path, ec);
       if(ec) {
-        boost::filesystem::copy_file(tmp_file, full_cache_path, boost::filesystem::copy_option::overwrite_if_exists);
+        boost::filesystem::copy_file(tmp_file, full_cache_path, boost::filesystem::copy_options::overwrite_existing);
         boost::filesystem::remove(tmp_file, ec);
       }
     }
--- a/src/source.cpp
+++ b/src/source.cpp
@@ -1122,8 +1122,9 @@ void Source::View::setup_format_style(bo
         get_buffer()->begin_user_action();
         try {
           boost::property_tree::ptree pt;
+          boost::property_tree::ptree no_elem;
           boost::property_tree::xml_parser::read_xml(stdout_stream, pt);
-          auto replacements_pt = pt.get_child("replacements", boost::property_tree::ptree());
+          auto replacements_pt = pt.get_child("replacements", no_elem);
           for(auto it = replacements_pt.rbegin(); it != replacements_pt.rend(); ++it) {
             if(it->first == "replacement") {
               auto offset = it->second.get<size_t>("<xmlattr>.offset");
--- a/src/window.cpp
+++ b/src/window.cpp
@@ -990,7 +990,7 @@ void Window::set_menu_actions() {
         if(std::any_of(exclude_folders.begin(), exclude_folders.end(), [&filename](const std::string &exclude_folder) {
              return filename == exclude_folder;
            }))
-          it.no_push();
+          it.disable_recursion_pending();
         continue;
       }
       files.emplace_back(path);
