--- a/vfe/vfesession.h
+++ b/vfe/vfesession.h
@@ -40,6 +40,8 @@
 
 #include "base/image/colourspace.h"
 
+typedef unsigned int uint;
+
 namespace vfe
 {
   using namespace pov_frontend;
--- a/source/base/image/image.cpp
+++ b/source/base/image/image.cpp
@@ -36,6 +36,7 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
+#include <unistd.h>
 
 
 // configbase.h must always be the first POV file included within base *.cpp files
@@ -2829,7 +2830,7 @@ class FileBackedPixelContainer
 			meta[0] = sizeof(pixel_type);
 			meta[1] = m_Width;
 			meta[2] = m_Height;
-			if (lseek64(m_File, pos, SEEK_SET) != pos)
+			if (lseek(m_File, pos, SEEK_SET) != pos)
 				throw POV_EXCEPTION(kFileDataErr, "Intermediate image storage backing file write/seek failed at creation.");
 			if (write(m_File, &meta[0], (int) sizeof(size_type)*3) != (sizeof(size_type)*3))
 				throw POV_EXCEPTION(kFileDataErr, "Intermediate image storage backing file write failed at creation.");
@@ -3000,7 +3001,7 @@ class FileBackedPixelContainer
 #endif
 				pos = block * sizeof(pixel_type) * m_Blocksize;
 				int chunk = sizeof(pixel_type) * m_Blocksize;
-				if (lseek64(m_File, pos, SEEK_SET) != pos)
+				if (lseek(m_File, pos, SEEK_SET) != pos)
 					throw POV_EXCEPTION(kFileDataErr, "Intermediate image storage backing file read/seek failed.");
 				int bytes = read(m_File, &m_Buffer[0], chunk);
 				if (bytes != (sizeof(pixel_type) * m_Blocksize))
@@ -3023,7 +3024,7 @@ class FileBackedPixelContainer
 
 			if (m_Dirty) {
 				pos = m_CurrentBlock * sizeof(pixel_type) * m_Blocksize;
-				if (lseek64(m_File, pos, SEEK_SET) != pos)
+				if (lseek(m_File, pos, SEEK_SET) != pos)
 					throw POV_EXCEPTION(kFileDataErr, "Intermediate image storage backing file write/seek failed.");
 				if (write(m_File, &m_Buffer[0], (int) sizeof(pixel_type) * m_Blocksize) != (sizeof(pixel_type) * m_Blocksize))
 					throw POV_EXCEPTION(kFileDataErr, "Intermediate image storage backing file write failed.");
